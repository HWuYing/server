import { TokenKey, Type } from '@fm/di';
import { BelongsToManyOptions, BelongsToOptions, HasManyOptions, HasOneOptions, ModelAttributes, ModelOptions, SyncOptions } from 'sequelize';
type EntityType = TokenKey | (() => TokenKey);
type EmptyClassDecorator = () => ClassDecorator;
type EmptyPropertyDecorator = () => PropertyDecorator;
type ColumnPorpertyDecorator<M, N> = () => (type: M, options: N) => PropertyDecorator;
type AssociationsDecorator<T> = ColumnPorpertyDecorator<EntityType, T>;
export { forwardRef } from '@fm/di';
export declare const Entity: EmptyClassDecorator;
export declare const Sync: (options?: SyncOptions) => ClassDecorator;
export declare const Table: (tableName: string, options?: ModelOptions) => ClassDecorator;
export declare const HasOne: AssociationsDecorator<HasOneOptions>;
export declare const HasMany: AssociationsDecorator<HasManyOptions>;
export declare const BelongsTo: AssociationsDecorator<BelongsToOptions>;
export declare const BelongsToMany: AssociationsDecorator<BelongsToManyOptions>;
export declare const PrimaryKey: EmptyPropertyDecorator;
export declare const Column: (name: string, options: ModelAttributes) => PropertyDecorator;
export declare const InjectEntity: (entity: Type<any>) => PropertyDecorator;
