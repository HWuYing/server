"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Res = exports.Req = exports.Next = exports.CustomParams = exports.Use = exports.Put = exports.Post = exports.Param = exports.Options = exports.Middleware = exports.Get = exports.Delete = exports.Controller = exports.All = void 0;
var tslib_1 = require("tslib");
var decorator_1 = require("./decorator");
Object.defineProperty(exports, "All", { enumerable: true, get: function () { return decorator_1.All; } });
Object.defineProperty(exports, "Controller", { enumerable: true, get: function () { return decorator_1.Controller; } });
Object.defineProperty(exports, "Delete", { enumerable: true, get: function () { return decorator_1.Delete; } });
Object.defineProperty(exports, "Get", { enumerable: true, get: function () { return decorator_1.Get; } });
Object.defineProperty(exports, "Middleware", { enumerable: true, get: function () { return decorator_1.Middleware; } });
Object.defineProperty(exports, "Options", { enumerable: true, get: function () { return decorator_1.Options; } });
Object.defineProperty(exports, "Param", { enumerable: true, get: function () { return decorator_1.Param; } });
Object.defineProperty(exports, "Post", { enumerable: true, get: function () { return decorator_1.Post; } });
Object.defineProperty(exports, "Put", { enumerable: true, get: function () { return decorator_1.Put; } });
Object.defineProperty(exports, "Use", { enumerable: true, get: function () { return decorator_1.Use; } });
var decorator_2 = require("./decorator");
Object.defineProperty(exports, "CustomParams", { enumerable: true, get: function () { return decorator_2.CustomParams; } });
Object.defineProperty(exports, "Next", { enumerable: true, get: function () { return decorator_2.Next; } });
Object.defineProperty(exports, "Req", { enumerable: true, get: function () { return decorator_2.Req; } });
Object.defineProperty(exports, "Res", { enumerable: true, get: function () { return decorator_2.Res; } });
tslib_1.__exportStar(require("./manager"), exports);
